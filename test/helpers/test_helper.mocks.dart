// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_test_case/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i7;

import 'package:flutter_test_case/home_controller.dart' as _i3;
import 'package:flutter_test_case/user_model.dart' as _i4;
import 'package:flutter_test_case/utils/asset_loader.dart' as _i8;
import 'package:get/get.dart' as _i2;
import 'package:get/get_state_manager/src/simple/list_notifier.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRxBool_0 extends _i1.SmartFake implements _i2.RxBool {
  _FakeRxBool_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRxList_1<E> extends _i1.SmartFake implements _i2.RxList<E> {
  _FakeRxList_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRxString_2 extends _i1.SmartFake implements _i2.RxString {
  _FakeRxString_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInternalFinalCallback_3<T> extends _i1.SmartFake
    implements _i2.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HomeController].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeController extends _i1.Mock implements _i3.HomeController {
  MockHomeController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get limit =>
      (super.noSuchMethod(Invocation.getter(#limit), returnValue: 0) as int);

  @override
  _i2.RxBool get isLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isLoading),
            returnValue: _FakeRxBool_0(this, Invocation.getter(#isLoading)),
          )
          as _i2.RxBool);

  @override
  _i2.RxList<_i4.UserModel> get usersState =>
      (super.noSuchMethod(
            Invocation.getter(#usersState),
            returnValue: _FakeRxList_1<_i4.UserModel>(
              this,
              Invocation.getter(#usersState),
            ),
          )
          as _i2.RxList<_i4.UserModel>);

  @override
  _i2.RxString get message =>
      (super.noSuchMethod(
            Invocation.getter(#message),
            returnValue: _FakeRxString_2(this, Invocation.getter(#message)),
          )
          as _i2.RxString);

  @override
  set page(int? _page) => super.noSuchMethod(
    Invocation.setter(#page, _page),
    returnValueForMissingStub: null,
  );

  @override
  set limit(int? _limit) => super.noSuchMethod(
    Invocation.setter(#limit, _limit),
    returnValueForMissingStub: null,
  );

  @override
  _i2.InternalFinalCallback<void> get onStart =>
      (super.noSuchMethod(
            Invocation.getter(#onStart),
            returnValue: _FakeInternalFinalCallback_3<void>(
              this,
              Invocation.getter(#onStart),
            ),
          )
          as _i2.InternalFinalCallback<void>);

  @override
  _i2.InternalFinalCallback<void> get onDelete =>
      (super.noSuchMethod(
            Invocation.getter(#onDelete),
            returnValue: _FakeInternalFinalCallback_3<void>(
              this,
              Invocation.getter(#onDelete),
            ),
          )
          as _i2.InternalFinalCallback<void>);

  @override
  bool get initialized =>
      (super.noSuchMethod(Invocation.getter(#initialized), returnValue: false)
          as bool);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  int get listeners =>
      (super.noSuchMethod(Invocation.getter(#listeners), returnValue: 0)
          as int);

  @override
  void onInit() => super.noSuchMethod(
    Invocation.method(#onInit, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> fetchUser({bool? refresh = false}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchUser, [], {#refresh: refresh}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void update([List<Object>? ids, bool? condition = true]) =>
      super.noSuchMethod(
        Invocation.method(#update, [ids, condition]),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
    Invocation.method(#onReady, []),
    returnValueForMissingStub: null,
  );

  @override
  void onClose() => super.noSuchMethod(
    Invocation.method(#onClose, []),
    returnValueForMissingStub: null,
  );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
    Invocation.method(#$configureLifeCycle, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Disposer addListener(_i6.GetStateUpdate? listener) =>
      (super.noSuchMethod(
            Invocation.method(#addListener, [listener]),
            returnValue: () {},
          )
          as _i6.Disposer);

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void refresh() => super.noSuchMethod(
    Invocation.method(#refresh, []),
    returnValueForMissingStub: null,
  );

  @override
  void refreshGroup(Object? id) => super.noSuchMethod(
    Invocation.method(#refreshGroup, [id]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyChildrens() => super.noSuchMethod(
    Invocation.method(#notifyChildrens, []),
    returnValueForMissingStub: null,
  );

  @override
  void removeListenerId(Object? id, _i7.VoidCallback? listener) =>
      super.noSuchMethod(
        Invocation.method(#removeListenerId, [id, listener]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Disposer addListenerId(Object? key, _i6.GetStateUpdate? listener) =>
      (super.noSuchMethod(
            Invocation.method(#addListenerId, [key, listener]),
            returnValue: () {},
          )
          as _i6.Disposer);

  @override
  void disposeId(Object? id) => super.noSuchMethod(
    Invocation.method(#disposeId, [id]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AssetLoader].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetLoader extends _i1.Mock implements _i8.AssetLoader {
  MockAssetLoader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> loadString(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#loadString, [path]),
            returnValue: _i5.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#loadString, [path]),
              ),
            ),
          )
          as _i5.Future<String>);
}
